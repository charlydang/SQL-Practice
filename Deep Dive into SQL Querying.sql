use [AdventureWorks2012]

--
SELECT * FROM [HumanResources].[Department]

--SHOW ME ALL DEPRTMENT NAMES

SELECT NAME FROM [HumanResources].[Department]

--SHOW ME ALL THE THR GROUP

SELECT GROUPNAME FROM [HumanResources].[Department]

--SHOW ME ALL THE DISTINCT GROUPNAME

SELECT DISTINCT GROUPNAME FROM [HumanResources].[Department]

--SHOW ME ALL THE DEPARTMENT WHO ARE A PART OF MANUFACTURING
SELECT NAME FROM [HumanResources].[Department] 
WHERE GroupName LIKE 'Manufacturing'

--GIVE ME ALL THE EMPLOYEES FROM THE EMPLOYEE TABLE
SELECT * FROM [HumanResources].[Employee]

--GIVE ME A LIST OF ALL EMPLOYEE WHO HAVE AN ORGLEVEL = 2
SELECT * FROM [HumanResources].[Employee] WHERE OrganizationLevel = 2


--GIVE ME A LIST OF ALL EMPLOYEES WHO HAVE ORGLEVEL = 2 or 3
SELECT * FROM [HumanResources].[Employee] WHERE OrganizationLevel = 2 OR OrganizationLevel = 3
SELECT * FROM [HumanResources].[Employee] WHERE OrganizationLevel IN (2,3)

--GIVE ME A LIST OF EMPLOYEES WHO HAVE A TITLE AS FACILITIES MANAGER
SELECT * FROM [HumanResources].[Employee] WHERE JobTitle LIKE 'Facilities Manager'
SELECT * FROM [HumanResources].[Employee] WHERE JobTitle LIKE 'FACILITIES MANAGER'
SELECT * FROM [HumanResources].[Employee] WHERE JobTitle LIKE 'FACILITIES MANAGER      '

--GIVE ME ALL THE EMPLOYEES WHO HAVE A MANAGER TITLE
SELECT * FROM [HumanResources].[Employee] WHERE JobTitle LIKE '%Manager' --% Is the Wild Card so anything can exist before the word Manager
SELECT * FROM [HumanResources].[Employee] WHERE JobTitle LIKE '%Control%'

--GIVE ME ALL EMPLOYEES WHO ARE BORN AFTER Jan 1, 1980
SELECT * FROM [HumanResources].[Employee] WHERE BirthDate > '1/1/1980'

--GIVE ME ALL EMPLOYEES WHO ARE BORN BETWEEN Jan1, 1970 and Jan1, 1980
SELECT * FROM [HumanResources].[Employee] WHERE BirthDate > '1/1/1970' AND BirthDate < '1/1/1980'

--CALCULATED COLUMNS.
SELECT NAME, LISTPRICE FROM [Production].[Product]

SELECT NAME, LISTPRICE, LISTPRICE + 10 AS ADJUSTED_LIST_PRICE FROM [Production].[Product]

--INTO
SELECT NAME, LISTPRICE, LISTPRICE + 10 AS ADJUSTED_LIST_PRICE INTO [Production].[Product_2] FROM [Production].[Product]

SELECT * FROM [Production].[Product_2]

SELECT NAME, LISTPRICE, LISTPRICE + 10 AS ADJUSTED_LIST_PRICE INTO #tmpname FROM [Production].[Product]

SELECT * FROM #tmpname 

--DELETE DATA FROM TABLE
DELETE FROM [Production].[Product_2] WHERE NAME LIKE 'Bearing Ball'
SELECT * FROM [Production].[Product_2]

--UPDATE
UPDATE [Production].[Product_2]
SET NAME = 'BLADE_NEW' WHERE NAME LIKE 'BLADE'

SELECT * FROM [Production].[Product_2]

-- InnerJoin only common entries
-- OuterJoin combines things even without 
-- Full Outer Join both happens, everything not matched is null
-- Cross Join every row from table 1 joins with every row of table 2


/**
JOINS
**/
CREATE TABLE MYEMPLOYEE (EMPLOYEEID INT, FIRSTNAME VARCHAR(20), LASTNAME VARCHAR(20))
INSERT INTO MYEMPLOYEE VALUES (1, 'Michael', 'Scott')
INSERT INTO MYEMPLOYEE VALUES (1, 'Pam', 'Beesly')
INSERT INTO MYEMPLOYEE VALUES (1, 'Dwight', 'Schrute')

SELECT * FROM MYEMPLOYEE

CREATE TABLE MYSALARY (EMPLOYEE INT, SALARY FLOAT)

INSERT INTO MYSALARY VALUES (1, 10000)

INSERT INTO MYSALARY VALUES (1, 8000)

INSERT INTO MYSALARY VALUES (1, 6000)

SELECT * FROM MYEMPLOYEE

SELECT * FROM MYSALARY

UPDATE MYEMPLOYEE
SET EMPLOYEEID = 2 WHERE FIRSTNAME LIKE 'PAM'

UPDATE MYEMPLOYEE
SET EMPLOYEEID = 3 WHERE FIRSTNAME LIKE 'DWIGHT'

UPDATE MYSALARY
SET EMPLOYEEID = 2 WHERE SALARY LIKE '8000'

UPDATE MYSALARY
SET EMPLOYEEID = 3 WHERE SALARY LIKE '6000'

--ALTER TABLE MYSALARY NAME COLUMN EMPLOYEE to EMPLOYEEID
EXEC sp_rename 'MYSALARY.EMPLOYEE', 'EMPLOYEEID', 'COLUMN';
SELECT * FROM MYSALARY

SELECT A.FIRSTNAME, A.LASTNAME, B.SALARY 
FROM MYEMPLOYEE A INNER JOIN MYSALARY B ON A.EMPLOYEEID = B.EMPLOYEEID

--left outer join
CREATE TABLE MYPHONE (EMPLOYEEID INT, PHONENUMBER INT)

INSERT INTO MYPHONE VALUES (1, 123456789)
INSERT INTO MYPHONE VALUES (2, 111111111)

SELECT * FROM MYEMPLOYEE
SELECT * FROM MYPHONE

SELECT * FROM MYEMPLOYEE A LEFT JOIN MYPHONE B
